import numpy as np
import matplotlib.pyplot as plt
import h5py
from network_visualization import plot_mosaic

def on_click_axes(event):
    """Enlarge or restore the selected axis."""
    ax = event.inaxes
    if ax is None:
        # Occurs when a region not in an axis is clicked...
        return
    if event.button is 1:
        f=plt.figure()
        w=layersWeights[ax.name].value
        if w.ndim == 4:
            w = np.transpose(w, (3, 2, 0, 1))

            nrows = int(np.round(np.sqrt(mosaic_number)))
            ncols = int(nrows)

            if nrows ** 2 < mosaic_number:
                ncols += 1

            f=plot_mosaic(w[:mosaic_number, 0], nrows, ncols,f)
            f.show()
        else:
            pass


    else:
        # No need to re-draw the canvas if it's not a left or right click
        return
    event.canvas.draw()


model = h5py.File('layer.h5', 'r')
layersName = []
layersWeights = {}

for i in model['layers']:
    layerIndex = 'layers' + '/' + i

    for n in model[layerIndex]:
        layerName = layerIndex + '/' + n
        layersName.append(n)

        for w in model[layerName]:
            weightsPath = layerName + '/' + w

            layersWeights[n] = model[weightsPath]
            # layersWeights.append(weights)

layerLength = len(layersName)
spacing = 1.2
axNumber = layerLength * 2 - 1

mosaic_number=0

for i in layersName:
    print(i)
    if layersWeights[i].ndim ==4:
        if layersWeights[i].shape[0] == layersWeights[i].shape[1]:
            if layersWeights[i].shape[3]>mosaic_number:
                mosaic_number=layersWeights[i].shape[3]



fig=plt.figure()

for i in range(axNumber):

    axes = fig.add_subplot(axNumber, 1, i + 1)  # 建立一个子图，如果要建立复合图，可以在这里修改

    if i % 2 == 0:
        bbox_props = dict(boxstyle="round", fc="w", ec="0.5", alpha=0.9)
        axes.text(0.5, 0.5, layersName[int(i / 2)], ha="center", va="center", size=20,
                  bbox=bbox_props)
        axes.name=layersName[int(i / 2)]
    elif i != axNumber - 1:
        axes.annotate('', xy=(0.5, 0), xytext=(0.5, 1),
                      arrowprops=dict(facecolor='black', shrink=0.05))
    else:
        pass

    axes.set_axis_off()


fig.canvas.mpl_connect('button_press_event', on_click_axes)
plt.show()
