import keras.backend as K
from keras.utils.vis_utils import plot_model, model_to_dot
import network_visualization
from network_visualization import *
# import theano
# import theano.tensor as T
# import tensorflow
# import tensorflow.tensor as T
import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
import h5py
from keras.models import load_model

def plot_subset_mosaic( im, nrows, ncols, fig, **kwargs):
    # Set default matplotlib parameters
    if not 'interpolation' in kwargs.keys():
        kwargs['interpolation'] = "none"

    if not 'cmap' in kwargs.keys():
        kwargs['cmap'] = "gray"

    # im = np.squeeze(im, axis=1)
    nimgs = len(im)

    imshape = im[0].shape

    mosaic = np.zeros(imshape)

    for i in range(nimgs):

        ax = fig.add_subplot(nrows, ncols, i + 1)
        ax.set_xlim(0, imshape[0] - 1)
        ax.set_ylim(0, imshape[1] - 1)


        mosaic = im[i]


        ax.imshow(mosaic, **kwargs)
        ax.set_axis_off()
    #fig.suptitle("Subset Selection of Patch #{} in Layer '{}'".format(ind, feature_map))
    # fig.canvas.mpl_connect('button_press_event', on_click)
    return fig


modelDimension =[]
model = load_model("testout404010_lr_0.0005_bs_128_model.h5")
#plot_model(model,'M3DModel.png',show_shapes=False)


h=h5py.File("crossVal404010.h5","r")
# X_test=h['X_test'][:,432:540,:,:,:]
# y_test=h['y_test'][:,432:540]
# X_test=h['X_test'][:,1188:1296,:,:,:]
# y_test=h['y_test'][:,1188:1296]
X_test=h['X_test'][:,0:20,:,:,:]
y_test=h['y_test'][:,0:20]

y_test = np.asarray([y_test[:], np.abs(np.asarray(y_test[:], dtype=np.float32) - 1)]).T
y_test = np.squeeze(y_test, axis=1)
batchSize=5
X_test =np.transpose(np.array(X_test), (1,0,2,3,4))
X_test=X_test[:] #(5,1,40,40,10)
y_test=y_test[:]

score_test, acc_test = model.evaluate(X_test, y_test, batch_size=batchSize, verbose=1)
prob_pre = model.predict(X_test, batch_size=batchSize, verbose=1)


class_idx = 0
reg_param = 1 / (2e-4)
# output =T.dmatrix('output')
# output=K.placeholder(shape=(None,2))
# output=model.output
input = model.input #tensor
cost  = -K.sum(K.log(input[:,class_idx]+1e-8))  #tensor
gradient = K.gradients(cost, input)  #list

sess = tf.InteractiveSession()
calcCost = network_visualization.TensorFlowTheanoFunction([input], cost)
calcGrad = network_visualization.TensorFlowTheanoFunction([input], gradient)

#2. Use subset selection:

step_size = 0.19
reg_param = 0.0000001

test=X_test[:]
data_c = test
oss_v = network_visualization.SubsetSelection(calcGrad, calcCost, data_c, alpha=reg_param, gamma=step_size)
result = oss_v.optimize(np.random.uniform(0, 1.0, size=data_c.shape))

result=result * test
result[result>0]=1

fig = plt.figure()
fig.suptitle('Xc')

result=np.squeeze(result,axis=1)
result =result[14]
result=np.transpose(result, (2,0,1))
nimgs = len(result)
nrows = int(np.round(np.sqrt(nimgs)))
ncols = int(nrows)
if (nrows ** 2) < nimgs:
    ncols += 1

fig = plot_subset_mosaic(result, nrows, ncols, fig)
plt.show()
