# -*- coding: utf-8 -*-
import os
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
matplotlib.use("Qt5Agg")
from PyQt5 import QtCore,QtWidgets
from PyQt5.QtCore import pyqtSlot,QStringListModel,pyqtSignal
from PyQt5.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QSizePolicy, QWidget, QListView,QMessageBox,QFileDialog,QDialog,QPushButton
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from Ui_3 import Ui_MainWindow
import h5py
from keras.utils.vis_utils import plot_model, model_to_dot
from keras.models import load_model

#from network_visualization import plot_mosaic,on_click


class MainWindow(QMainWindow, Ui_MainWindow):
    """
    Class documentation goes here.
    """

    def __init__(self, parent=None):
        """
        Constructor
        @param parent reference to the parent widget
        @type QWidget
        """
        super(MainWindow, self).__init__(parent)
        self.setupUi(self)

        self.matplotlibwidget_static.hide()
        self.matplotlibwidget_static_2.hide()
        #self.scrollArea.hide()
        self.horizontalSliderPatch.hide()
        self.horizontalSliderSlice.hide()
        self.horizontalSliderSS.hide()

        self.lcdNumberPatch.hide()
        self.lcdNumberSlice.hide()
        self.lcdNumberSS.hide()

        self.resetW=False
        self.resetF = False
        self.resetS = False

        self.chosenLayerName = []
        # the slider's value is the chosen patch's number
        self.chosenWeightNumber =1
        self.chosenWeightSliceNumber=1
        self.chosenPatchNumber = 1
        self.chosenPatchSliceNumber =1
        self.chosenSSNumber = 1
        self.openfile_name=''

        self.model={}
        self.qList=[]
        self.totalWeights=0
        self.totalWeightsSlices =0
        self.totalPatches=0
        self.totalPatchesSlices =0
        self.totalSS=0

        self.modelDimension= ''
        self.activations = {}
        self.act = {}
        self.weights ={}
        self.w={}
        self.LayerWeights = {}
        self.subset_selection = {}
        self.radioButtonValue=[]
        self.listView.clicked.connect(self.clickList)

        self.W_F=''

        # slider of the weight and feature
        self.horizontalSliderPatch.sliderReleased.connect(self.sliderValue)
        self.horizontalSliderPatch.valueChanged.connect(self.lcdNumberPatch.display)
        self.horizontalSliderSlice.sliderReleased.connect(self.sliderValue)
        self.horizontalSliderSlice.valueChanged.connect(self.lcdNumberSlice.display)
        self.matplotlibwidget_static.mpl.wheel_scroll_W_signal.connect(self.wheelScrollW)
        self.matplotlibwidget_static.mpl.wheel_scroll_signal.connect(self.wheelScroll)
        self.matplotlibwidget_static.mpl.wheel_scroll_3D_signal.connect(self.wheelScroll)


        # slider of the Subset Selection
        self.horizontalSliderSS.sliderReleased.connect(self.sliderValueSS)
        self.horizontalSliderSS.valueChanged.connect(self.lcdNumberSS.display)
        self.matplotlibwidget_static_2.mpl.wheel_scroll_SS_signal.connect(self.wheelScrollSS)


        #self.lab=QLabel()
        #self.lab.setPixmap(QPixmap("4040.png"))
        '''
        self.vbox=QVBoxLayout()
        self.vbox.addWidget(self.lab)
        self.widget.setLayout(self.vbox)
        self.widget.show()'''

        self.canvasStructure=MyMplCanvas()
        self.canvasStructure.loadImage()
        self.graphicscene = QtWidgets.QGraphicsScene()
        self.graphicscene.addWidget(self.canvasStructure)
        self.graphicsView.setScene(self.graphicscene)


    def wheelScroll(self,ind):
        self.horizontalSliderPatch.setValue(ind)
        self.horizontalSliderPatch.valueChanged.connect(self.lcdNumberPatch.display)


    def wheelScrollW(self,ind):
        self.horizontalSliderPatch.setValue(ind)
        self.horizontalSliderPatch.valueChanged.connect(self.lcdNumberPatch.display)

    def wheelScrollSS(self,indSS):
        self.horizontalSliderSS.setValue(indSS)
        self.horizontalSliderSS.valueChanged.connect(self.lcdNumberSS.display)

    def clickList(self,qModelIndex):

        self.chosenLayerName = self.qList[qModelIndex.row()]

    def show_layer_names(self):
        qList = []
        activations = self.model['activations']

        for i in activations:
            qList.append(i)
            layerPath = 'activations' + '/' + i
            self.act[i] = self.model[layerPath]
            if self.act[i].ndim==5 and self.modelDimension=='3D':
                self.act[i]=np.transpose(self.act[i],(0,1,4,2,3))
        self.qList = qList

    def sliderValue(self):
        if self.W_F=='w':
            self.chosenWeightNumber=self.horizontalSliderPatch.value()
            self.matplotlibwidget_static.mpl.weights_plot_3D(self.w, self.chosenWeightNumber, self.totalWeights,self.totalWeightsSlices)
        elif self.W_F=='f':
            if self.modelDimension=='2D':
                self.chosenPatchNumber=self.horizontalSliderPatch.value()
                self.matplotlibwidget_static.mpl.features_plot(self.chosenPatchNumber)
            elif self.modelDimension == '3D':
                self.chosenPatchNumber = self.horizontalSliderPatch.value()
                self.chosenPatchSliceNumber =self.horizontalSliderSlice.value()
                self.matplotlibwidget_static.mpl.features_plot_3D(self.chosenPatchNumber,self.chosenPatchSliceNumber)
        else:
            pass

    def sliderValueSS(self):
        self.chosenSSNumber=self.horizontalSliderSS.value()
        self.matplotlibwidget_static_2.mpl.subset_selection_plot(self.chosenSSNumber)

    @pyqtSlot()
    def on_wyChooseFile_clicked(self):
        self.openfile_name = QFileDialog.getOpenFileName(self,'Choose the file','.','H5 files(*.h5)')[0]
        if len(self.openfile_name)==0:
            pass
        else:
            self.resetW = True
            self.resetF = True
            self.resetS = True

            self.model=h5py.File(self.openfile_name,'r')
            # self.model['modelDimension'] = str(self.model['modelDimension'].value)[3:5]
            a=self.model['modelDimension'].value
            self.modelDimension=str(a)[3:5]

            self.weights =self.model['weights']
            if self.modelDimension =='3D':
                for i in self.weights:
                    self.LayerWeights[i] = self.weights[i].value
                    if self.LayerWeights[i].ndim == 5:
                        self.LayerWeights[i] = np.transpose(self.LayerWeights[i], (4,3,2,0,1))
            elif self.modelDimension =='2D':
                for i in self.weights:
                    # self.layerWeights[i] = self.weights[i].value
                    self.LayerWeights[i]=self.weights[i].value

                    if self.LayerWeights[i].ndim == 4:
                        self.LayerWeights[i] = np.transpose(self.LayerWeights[i], (3,2,0,1))
            else:
                print('the dimesnion of the weights should be 2D or 3D')


            self.show_layer_names()

            self.subset_selection =self.model['subset_selection']
            self.subset_selection = np.squeeze(self.subset_selection, axis=1)
            self.totalSS = len(self.subset_selection)

            # set the patch value of the feature map
            # self.horizontalSliderPatch.setMinimum(1)
            # self.horizontalSliderPatch.setMaximum(self.totalPatches)

            # set the patch value of the Subset Selection
            self.horizontalSliderSS.setMinimum(1)
            self.horizontalSliderSS.setMaximum(self.totalSS)
            # show the activations' name in the List
            slm = QStringListModel();
            slm.setStringList(self.qList)
            self.listView.setModel(slm)

    @pyqtSlot()
    def on_wyShowArchitecture_clicked(self):
        # Show the structure of the model and plot the weights
        if len(self.openfile_name) != 0:
            # show the weights
            self.matplotlibwidget_static_2.hide()
            self.matplotlibwidget_static.hide()
            self.matplotlibwidget_static_3.show()
            self.scrollArea.show()

        else:
            self.showChooseFileDialog()

    @pyqtSlot()
    def on_wyPlot_clicked(self):
        self.matplotlibwidget_static_2.hide()
        self.scrollArea.show()

        # Show the structure of the model and plot the weights
        if len(self.openfile_name) != 0:
            if self.radioButton.isChecked()== True :
                if len(self.chosenLayerName) != 0:
                    self.W_F='w'
                    # show the weights
                    if self.modelDimension == '2D':
                        self.lcdNumberPatch.hide()
                        self.horizontalSliderPatch.hide()

                        if self.resetW == True:
                            self.matplotlibwidget_static.mpl.getLayersWeights(self.LayerWeights)
                            self.resetW = False
                        self.matplotlibwidget_static.mpl.weights_plot_2D(self.chosenLayerName)
                        self.matplotlibwidget_static.show()

                    elif self.modelDimension == '3D':

                        self.w=self.LayerWeights[self.chosenLayerName]
                        self.totalWeights=self.w.shape[0]
                        self.totalWeightsSlices=self.w.shape[2]
                        self.horizontalSliderPatch.setMinimum(1)
                        self.horizontalSliderPatch.setMaximum(self.totalWeights)
                        self.horizontalSliderSlice.setMinimum(1)
                        self.horizontalSliderSlice.setMaximum(self.totalWeightsSlices)
                        self.matplotlibwidget_static.mpl.weights_plot_3D(self.w,self.chosenWeightNumber,self.totalWeights,self.totalWeightsSlices)

                        self.matplotlibwidget_static.show()
                        # self.horizontalSliderSlice.show()
                        self.horizontalSliderPatch.show()
                        # self.lcdNumberSlice.show()
                        self.lcdNumberPatch.show()
                    else:
                        print('the dimesnion should be 2D or 3D')

                else:
                    self.showChooseLayerDialog()

            elif self.radioButton_2.isChecked()== True :
                if len(self.chosenLayerName) != 0:
                    self.W_F = 'f'
                    if self.modelDimension == '2D':

                        self.activations=self.act[self.chosenLayerName]
                        self.totalPatches=self.activations.shape[0]

                        if self.resetW == True:
                            self.matplotlibwidget_static.mpl.getLayersFeatures(self.activations, self.totalPatches)
                            self.resetW = False

                        # show the features
                        self.horizontalSliderPatch.setMinimum(1)
                        self.horizontalSliderPatch.setMaximum(self.totalPatches)
                        self.matplotlibwidget_static.mpl.features_plot(self.chosenPatchNumber)
                        self.matplotlibwidget_static.show()
                        self.horizontalSliderSlice.hide()
                        self.horizontalSliderPatch.show()
                        self.lcdNumberPatch.show()
                        self.lcdNumberSlice.hide()

                    elif self.modelDimension =='3D':
                        self.activations = self.act[self.chosenLayerName]
                        self.totalPatches = self.activations.shape[0]
                        self.totalPatchesSlices=self.activations.shape[2]

                        if self.resetW == True:
                            self.matplotlibwidget_static.mpl.getLayersFeatures_3D(self.activations, self.totalPatches,self.totalPatchesSlices)
                            self.resetW = False

                        self.horizontalSliderPatch.setMinimum(1)
                        self.horizontalSliderPatch.setMaximum(self.totalPatches)
                        self.horizontalSliderSlice.setMinimum(1)
                        self.horizontalSliderSlice.setMaximum(self.totalPatchesSlices)
                        self.matplotlibwidget_static.mpl.features_plot_3D(self.chosenPatchNumber,self.chosenPatchSliceNumber)
                        self.horizontalSliderSlice.show()
                        self.horizontalSliderPatch.show()
                        self.lcdNumberPatch.show()
                        self.lcdNumberSlice.show()
                        self.matplotlibwidget_static.show()

                    else:
                        print('the dimesnion should be 2D or 3D')

                else:
                    self.showChooseLayerDialog()

            else:
                self.showChooseButtonDialog()

        else:
            self.showChooseFileDialog()

    @pyqtSlot()
    def on_wySubsetSelection_clicked(self):
        # Show the Subset Selection
        if len(self.openfile_name) != 0:
            # show the weights
            self.scrollArea.hide()
            self.lcdNumberPatch.hide()
            self.lcdNumberSlice.hide()
            self.horizontalSliderPatch.hide()
            self.horizontalSliderSlice.hide()
            self.matplotlibwidget_static.hide()
            self.matplotlibwidget_static_2.show()
            self.horizontalSliderSS.show()
            self.lcdNumberSS.show()
            if self.resetS == True:
                self.matplotlibwidget_static_2.mpl.getSubsetSelections(self.subset_selection,self.totalSS)
                self.resetS=False
            self.matplotlibwidget_static_2.mpl.subset_selection_plot(self.chosenSSNumber)
        else:
            self.showChooseFileDialog()

    def clickList_1(self, qModelIndex):
        self.chosenActivationName = self.qList[qModelIndex.row()]

    def showChooseFileDialog(self):
        reply = QMessageBox.information(self,
                                        "Warning",
                                        "Please select one H5 File at first",
                                        QMessageBox.Ok )

    def showChooseLayerDialog(self):
        reply = QMessageBox.information(self,
                                        "Warning",
                                        "Please select one Layer at first",
                                        QMessageBox.Ok)

    def showChooseButtonDialog(self):
        reply = QMessageBox.information(self,
                                        "Warning",
                                        "Please select to plot the weights or the features",
                                        QMessageBox.Ok)

class MyMplCanvas(FigureCanvas):
    wheel_scroll_W_signal = pyqtSignal(int)
    wheel_scroll_signal = pyqtSignal(int)
    wheel_scroll_3D_signal = pyqtSignal(int)
    wheel_scroll_SS_signal = pyqtSignal(int)
    def __init__(self, parent=None, width=15, height=15):

        plt.rcParams['font.family'] = ['SimHei']
        plt.rcParams['axes.unicode_minus'] = False

        self.fig = plt.figure(figsize=(width, height))
        #self.openfile_name=''
        self.model = {}

        self.w_count=0
        self.f_count=0
        self.s_count=0
        self.layerWeights = {}  # {layer name: weights value}
        self.edgesInLayerName = [] #(input layer name, output layer name)
        self.allLayerNames = []
        self.axesDict = {}

        self.activations = {}
        self.weights ={}
        self.totalWeights=0
        self.totalWeightsSlices =0
        self.chosenWeightNumber =0
        self.chosenWeightSliceNumber =0
        self.indW =0

        self.subset_selection = {}

        self.chosenLayerName=[]

        self.ind =0
        self.indFS =0
        self.nrows = 0
        self.ncols = 0
        self.totalPatches = 0
        self.totalPatchesSlices = 0

        # subset selection parameters
        self.totalSS =0
        self.chosenSSNumber =0


        FigureCanvas.__init__(self, self.fig)
        self.setParent(parent)

        FigureCanvas.setSizePolicy(self,QSizePolicy.Expanding,QSizePolicy.Expanding)
        FigureCanvas.updateGeometry(self)

    def loadImage(self):

        strImg = mpimg.imread('4040.png')
        plt.imshow(strImg)


    def weights_plot_2D(self,chosenLayerName):
        self.fig.clf()
        self.chosenLayerName=chosenLayerName
        self.plot_weight_mosaic()

    def weights_plot_3D(self,w,chosenWeightNumber,totalWeights,totalWeightsSlices):
        self.weights=w
        self.chosenWeightNumber=chosenWeightNumber
        self.indW=self.chosenWeightNumber-1
        self.totalWeights=totalWeights
        self.totalWeightsSlices=totalWeightsSlices
        self.fig.clf()

        self.plot_weight_mosaic_3D(w)

    def features_plot(self,chosenPatchNumber):


        self.ind = chosenPatchNumber-1

        if self.activations.ndim == 4:
            featMap=self.activations[self.ind]

            # Compute nrows and ncols for images
            n_mosaic = len(featMap)
            self.nrows = int(np.round(np.sqrt(n_mosaic)))
            self.ncols = int(self.nrows)
            if (self.nrows ** 2) < n_mosaic:
                self.ncols += 1

            self.fig.clear()
            self.plot_feature_mosaic(featMap, self.nrows, self.ncols)
            self.fig.suptitle("Feature Maps of Patch #{} ".format(self.ind+1))
            self.draw()
        else:
            pass

    def features_plot_3D(self,chosenPatchNumber,chosenPatchSliceNumber):
        self.ind = chosenPatchNumber - 1
        self.indFS =chosenPatchSliceNumber -1

        if self.activations.ndim == 5:
            featMap = self.activations[self.ind][self.indFS]

            # Compute nrows and ncols for images
            n_mosaic = len(featMap)
            self.nrows = int(np.round(np.sqrt(n_mosaic)))
            self.ncols = int(self.nrows)
            if (self.nrows ** 2) < n_mosaic:
                self.ncols += 1

            self.fig.clear()
            self.plot_feature_mosaic_3D(featMap, self.nrows, self.ncols)
            self.fig.suptitle("#{} Feature Maps of Patch #{} ".format(self.indFS+1,self.ind + 1))
            self.draw()
        else:
            pass

    def subset_selection_plot(self, chosenSSNumber):

        self.chosenSSNumber =chosenSSNumber
        self.indSS = self.chosenSSNumber - 1
        ss = self.subset_selection[self.indSS]

        self.fig.clear()
        self.plot_subset_mosaic(ss)
        self.draw()

    def plot_weight_mosaic(self,**kwargs):

        # Set default matplotlib parameters
        if not 'interpolation' in kwargs.keys():
            kwargs['interpolation'] = "none"

        if not 'cmap' in kwargs.keys():
            kwargs['cmap'] = "gray"

        #self.fig.suptitle("Weights of Layer '{}'".format(self.chosenLayerName))
        w = self.layerWeights[self.chosenLayerName]

        mosaic_number = w.shape[0]
        w = w[:mosaic_number, 0]
        nrows = int(np.round(np.sqrt(mosaic_number)))
        ncols = int(nrows)

        if nrows ** 2 < mosaic_number:
            ncols += 1

        imshape = w[0].shape

        for i in range(mosaic_number):

            ax = self.fig.add_subplot(nrows, ncols, i + 1)
            ax.set_xlim(0, imshape[0] - 1)
            ax.set_ylim(0, imshape[1] - 1)
            mosaic = w[i]
            ax.imshow(mosaic, **kwargs)
            ax.set_axis_off()

            self.fig.suptitle("Weights of Layer '{}'".format(self.chosenLayerName))
            self.draw()

        self.fig.canvas.mpl_connect('button_press_event', self.on_click)

    def plot_weight_mosaic_3D(self,w,**kwargs):

        # Set default matplotlib parameters
        if not 'interpolation' in kwargs.keys():
            kwargs['interpolation'] = "none"

        if not 'cmap' in kwargs.keys():
            kwargs['cmap'] = "gray"

        mosaic_number = w.shape[0]
        w = w[:mosaic_number, 0] #(32,3,3,3)
        w=w[self.indW] #(3,3,3)

        nimgs = w.shape[0]
        nrows = int(np.round(np.sqrt(nimgs)))
        ncols = int(nrows)
        if (nrows ** 2) < nimgs:
            ncols += 1

        imshape = w[0].shape

        for i in range(nimgs):
            ax = self.fig.add_subplot(nrows, ncols, i + 1)
            ax.set_xlim(0, imshape[0] - 1)
            ax.set_ylim(0, imshape[1] - 1)

            mosaic = w[i]

            ax.imshow(mosaic, **kwargs)
            ax.set_axis_off()

        self.fig.suptitle("#{} Weights of the Layer".format(self.indW+1))
        self.draw()
        self.fig.canvas.mpl_connect('button_press_event', self.on_click)
        self.fig.canvas.mpl_connect('scroll_event', self.onscrollW)

    def plot_feature_mosaic(self,im, nrows, ncols, **kwargs):

        # Set default matplotlib parameters
        if not 'interpolation' in kwargs.keys():
            kwargs['interpolation'] = "none"

        if not 'cmap' in kwargs.keys():
            kwargs['cmap'] = "gray"

        nimgs = len(im)
        imshape = im[0].shape

        for i in range(nimgs):

            ax = self.fig.add_subplot(nrows, ncols,i+1)
            ax.set_xlim(0,imshape[0]-1)
            ax.set_ylim(0,imshape[1]-1)

            mosaic = im[i]

            ax.imshow(mosaic, **kwargs)
            ax.set_axis_off()
        self.draw()
        self.fig.canvas.mpl_connect('button_press_event', self.on_click)
        self.fig.canvas.mpl_connect('scroll_event', self.onscroll)

    def plot_feature_mosaic_3D(self,im, nrows, ncols, **kwargs):

        # Set default matplotlib parameters
        if not 'interpolation' in kwargs.keys():
            kwargs['interpolation'] = "none"

        if not 'cmap' in kwargs.keys():
            kwargs['cmap'] = "gray"

        nimgs = len(im)
        imshape = im[0].shape

        for i in range(nimgs):

            ax = self.fig.add_subplot(nrows, ncols,i+1)
            ax.set_xlim(0,imshape[0]-1)
            ax.set_ylim(0,imshape[1]-1)

            mosaic = im[i]

            ax.imshow(mosaic, **kwargs)
            ax.set_axis_off()
        self.draw()
        self.fig.canvas.mpl_connect('button_press_event', self.on_click)
        self.fig.canvas.mpl_connect('scroll_event', self.onscroll_3D)

    def plot_subset_mosaic(self,im,**kwargs):
        if not 'interpolation' in kwargs.keys():
            kwargs['interpolation'] = "none"

        if not 'cmap' in kwargs.keys():
            kwargs['cmap'] = "gray"

        if len(im.shape) ==2:
            imshape = im.shape

            ax = self.fig.add_subplot(111)
            ax.set_xlim(0, imshape[0] - 1)
            ax.set_ylim(0, imshape[1] - 1)
            ax.imshow(im, **kwargs)
            ax.set_axis_off()

        elif len(im.shape) ==3:
            im=np.transpose(im,(2,0,1))
            nimgs=im.shape[0]
            imshape = im[0].shape
            nrows = int(np.round(np.sqrt(nimgs)))
            ncols = int(nrows)
            if (nrows ** 2) < nimgs:
                ncols += 1

            for i in range(nimgs):

                ax = self.fig.add_subplot(nrows, ncols, i + 1)
                ax.set_xlim(0, imshape[0] - 1)
                ax.set_ylim(0, imshape[1] - 1)

                mosaic = im[i]

                ax.imshow(mosaic, **kwargs)
                ax.set_axis_off()
        else:
            print('the dimension of the subset selection is not right')

        self.fig.suptitle("Subset Selection of Patch #{}".format(self.indSS+1))
        self.fig.canvas.mpl_connect('button_press_event', self.on_click)
        self.fig.canvas.mpl_connect('scroll_event', self.onscrollSS)

    def on_click(self,event):
        """Enlarge or restore the selected axis."""
        ax = event.inaxes
        if ax is None:
            # Occurs when a region not in an axis is clicked...
            return
        if event.button is 1:
            # On left click, zoom the selected axes
            ax._orig_position = ax.get_position()
            ax.set_position([0.1, 0.1, 0.85, 0.85])
            for axis in event.canvas.figure.axes:
                # Hide all the other axes...
                if axis is not ax:
                    axis.set_visible(False)
        elif event.button is 3:
            # On right click, restore the axes
            try:
                ax.set_position(ax._orig_position)
                for axis in event.canvas.figure.axes:
                    axis.set_visible(True)
            except AttributeError:
                # If we haven't zoomed, ignore...
                pass
        else:
            # No need to re-draw the canvas if it's not a left or right click
            return
        event.canvas.draw()

    def onscrollW(self, event):
        if event.button == 'up':
            if self.indW == (self.totalWeights-1):
                pass
            else:
                self.indW+= 1
            # w = self.weights[self.indW]
            self.fig.clear()
            self.plot_weight_mosaic_3D(self.weights)
            self.draw()
            self.wheel_scroll_W_signal.emit(self.indW+1)


        elif event.button == 'down':
            if self.indW -1<0:
                self.indW =0
            else:
                self.indW -= 1

            self.fig.clear()
            self.plot_weight_mosaic_3D(self.weights)
            self.draw()
            self.wheel_scroll_W_signal.emit(self.indW+1)
        else:
            pass

    def onscroll(self, event):

        if event.button == 'up':
            if self.ind == (self.totalPatches - 1):
                pass
            else:
                self.ind += 1
            featMap = self.activations[self.ind]
            self.fig.clear()
            self.plot_feature_mosaic(featMap, self.nrows, self.ncols)
            self.fig.suptitle("Feature Maps of Patch #{} ".format(self.ind + 1))
            self.draw()
            self.wheel_scroll_signal.emit(self.ind + 1)


        elif event.button == 'down':
            if self.ind - 1 < 0:
                self.ind = 0
            else:
                self.ind -= 1
            featMap = self.activations[self.ind]
            self.fig.clear()
            self.plot_feature_mosaic(featMap, self.nrows, self.ncols)
            self.fig.suptitle("Feature Maps of Patch #{}".format(self.ind + 1))
            self.draw()
            self.wheel_scroll_signal.emit(self.ind + 1)
        else:
            pass

    def onscroll_3D(self, event):

        if event.button == 'up':
            if self.ind == (self.totalPatches - 1):
                pass
            else:
                self.ind += 1
            featMap = self.activations[self.ind][self.indFS]
            self.fig.clear()
            self.plot_feature_mosaic(featMap, self.nrows, self.ncols)
            self.fig.suptitle("#{} Feature Maps of Patch #{} ".format(self.indFS+1,self.ind + 1))
            self.draw()
            self.wheel_scroll_3D_signal .emit(self.ind + 1)


        elif event.button == 'down':
            if self.ind - 1 < 0:
                self.ind = 0
            else:
                self.ind -= 1
            featMap = self.activations[self.ind][self.indFS]
            self.fig.clear()
            self.plot_feature_mosaic(featMap, self.nrows, self.ncols)
            self.fig.suptitle("#{} Feature Maps of Patch #{} ".format(self.indFS + 1, self.ind + 1))
            self.draw()
            self.wheel_scroll_3D_signal .emit(self.ind + 1)
        else:
            pass

    def onscrollSS(self, event):
        if event.button == 'up':
            if self.indSS == (self.totalSS-1):
                pass
            else:
                self.indSS+= 1
            ss = self.subset_selection[self.indSS]
            self.fig.clear()
            self.plot_subset_mosaic(ss)
            self.draw()
            self.wheel_scroll_signal.emit(self.ind+1)
            self.wheel_scroll_SS_signal.emit(self.indSS+1)


        elif event.button == 'down':
            if self.indSS -1<0:
                self.indSS =0
            else:
                self.indSS -= 1
            ss = self.subset_selection[self.indSS]
            self.fig.clear()
            self.plot_subset_mosaic(ss)
            # self.fig.suptitle("Feature Maps of Patch #{} in Layer '{}'".format(self.ind + 1, self.chosenLayerName))
            self.draw()
            self.wheel_scroll_SS_signal.emit(self.indSS+1)
        else:
            pass

    def getLayersWeights(self,LayerWeights):
        self.layerWeights = LayerWeights

    def getLayersFeatures(self,activations,totalPatches):
        self.activations = activations
        self.totalPatches=totalPatches

    def getLayersFeatures_3D(self,activations, totalPatches,totalPatchesSlices):
        self.activations = activations
        self.totalPatches=totalPatches
        self.totalPatchesSlices=totalPatchesSlices

    def getSubsetSelections(self,subset_selection,totalSS):
        self.subset_selection = subset_selection
        self.totalSS=totalSS


class MatplotlibWidget(QWidget):

    def __init__(self, parent=None):
        super(MatplotlibWidget, self).__init__(parent)
        self.initUi()

    def initUi(self):
        self.layout = QVBoxLayout(self)
        self.mpl = MyMplCanvas(self, width=15, height=15)
        self.layout.addWidget(self.mpl)


if __name__ == '__main__':
    import sys
    app = QApplication(sys.argv)
    ui = MainWindow()
    ui.show()
    sys.exit(app.exec_())
