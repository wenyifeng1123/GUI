#coding:utf-8
from __future__ import print_function

import numpy as np
import matplotlib.pyplot as plt
import os
import dicom
import dicom_numpy
from UnpatchNew import*
import scipy.io as sio
import matplotlib as mpl
from collections import Counter
from Tkinter import *
import matplotlib
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure

class IndexTracker(object):
    def __init__(self, ax, X, Y, Z, fig):
        self.ax = ax
        ax.set_title('Axial View')

        self.X = X
        rows1, cols1, self.slices = X.shape
        self.ind = self.slices//2
        self.Y = Y
        self.Z = Z
        self.fig = fig

        self.update()

    def onscroll(self, event):
        print("%s %s" % (event.button, event.step))
        if event.button == 'up':
            self.ind = (self.ind + 1) % self.slices
        else:
            self.ind = (self.ind - 1) % self.slices
        plt.cla() # not clf
        self.update()

    def update(self):
        self.im1 = drawPic.a.imshow(np.swapaxes(self.X[:, :, self.ind], 0, 1), cmap='gray', vmin=0, vmax=2094)

        self.cmap1 = mpl.colors.ListedColormap(['blue', 'pink', 'violet', 'yellow', 'green'])
        self.im2 = drawPic.a.imshow(np.swapaxes(self.Y[:, :, self.ind], 0, 1), cmap=self.cmap1, alpha=.3, vmin=1, vmax=6)

        plt.rcParams['hatch.color'] = 'r'
        self.im3 = drawPic.a.contourf(np.transpose(self.Z[:, :, self.ind]), hatches=[None, '\\\\', 'XXX', '///'], colors='none', edges='r')

        drawPic.a.set_ylabel('slice %s' % self.ind)
        self.fig.canvas.draw_idle()


def drawPic():

    drawPic.a = drawPic.f.add_subplot(111)
    tracker = IndexTracker(drawPic.a, voxel_ndarray, IType, IArte, drawPic.f)
    drawPic.f.canvas.mpl_connect('scroll_event', tracker.onscroll)


    drawPic.f.xlim(0, voxel_ndarray.shape[0] * dx)
    drawPic.f.ylim(voxel_ndarray.shape[1] * dy, 0)
    drawPic.f.colorbar(tracker.im2)

    plt.show()

    # 一定要加这个不然就不会显示后面滚动的结果
    drawPic.f.show()
    drawPic.canvas.show()




if __name__ == '__main__':
    PathDicom = "E:/pycharm/workspace/GUI_Sebastian_Milde/t1_tse_tra_Kopf_Motion_0003"
    files = sorted([os.path.join(PathDicom, file) for file in os.listdir(PathDicom)], key=os.path.getctime)
    datasets = [dicom.read_file(f) \
                            for f in files]
    try:
        voxel_ndarray, pixel_space = dicom_numpy.combine_slices(datasets)
    except dicom_numpy.DicomImportException:
        raise
    dx, dy, dz = 1.0, 1.0, pixel_space[2][2]

    PatchSize = np.array((40.0, 40.0))     # only 2 elements
    PatchOverlay = 0.5
    Path = "Pred_result.mat"
    conten = sio.loadmat(Path)
    prob_test = conten['prob_pre']

    IndexType = np.argmax(prob_test, 1)
    IndexType[IndexType==0] = 1
    IndexType[(IndexType>1) & (IndexType<4)] = 2
    IndexType[(IndexType>6) & (IndexType<9)] = 3
    IndexType[(IndexType>3) & (IndexType<7)] = 4
    IndexType[IndexType>8] = 5

    a = Counter(IndexType).most_common(1)
    domain = a[0][0]

    PType = np.delete(prob_test,[1,3,5,6,8,10],1) # only 5 region left
    PArte = np.delete(prob_test,[0,2,4,7,9],1)
    PArte[:,[4,5]] = PArte[:,[5,4]]
    PNew = np.concatenate((PType, PArte), axis=1)
    IndexArte = np.argmax(PNew,1)

    IType = UnpatchType(IndexType, domain, PatchSize, PatchOverlay, voxel_ndarray.shape)
    IArte = UnpatchArte(IndexArte, PatchSize, PatchOverlay, voxel_ndarray.shape)


    # draw the window
    mpl.use('TkAgg')
    root = Tk()
    drawPic.f = Figure(figsize=(7, 6), dpi=100)

    drawPic.canvas = FigureCanvasTkAgg(drawPic.f, master=root)
    drawPic.canvas.show()
    drawPic.canvas.get_tk_widget().grid(row=0, columnspan=3)

    Button(root,text='画图',command=drawPic).grid(row=1,column=2,columnspan=3)

    #启动事件循环
    root.mainloop()

